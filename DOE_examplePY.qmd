---
title: "Experimental Design Example"
format: md
jupyter: python3
execute:
  echo: true
---

## Setup

```{python}
#| label: setup-python

import numpy as np
import pandas as pd
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.metrics import mean_squared_error
import matplotlib.pyplot as plt
import seaborn as sns

sns.set(style="whitegrid")
```

## Data Simulation

We simulate data for three cases:

1. **No multicollinearity**: x1 and x2 are independent. 
2. **Mild multicollinearity**: x2 is moderately correlated with x1. 
3. **Strong multicollinearity**: x2 is highly correlated with x1.

```{python}
#| label: simulate-data

np.random.seed(123)
n = 100
b0, b1, b2 = 5, 3, -2
noise = np.random.normal(0, 1, n)

def simulate_data(correlation: float):
    x1 = np.random.normal(0, 1, n)
    x2 = correlation * x1 + np.sqrt(1 - correlation**2) * np.random.normal(0, 1, n)
    y = b0 + b1 * x1 + b2 * x2 + noise
    return pd.DataFrame({'x1': x1, 'x2': x2, 'y': y})

df_none = simulate_data(0.0)
df_mild = simulate_data(0.5)
df_strong = simulate_data(0.95)
```

## Visualizing Correlation

```{python}
#| label: visualize-correlation
#| fig-cap: "Scatterplots showing increasing correlation between x1 and x2"

fig, axs = plt.subplots(1, 3, figsize=(15, 4))
for ax, df, title in zip(axs, [df_none, df_mild, df_strong],
                         ["No Correlation", "Mild Correlation", "Strong Correlation"]):
    sns.scatterplot(data=df, x="x1", y="x2", ax=ax)
    ax.set_title(title)
plt.tight_layout()
plt.show()
```

## Modeling Function

```{python}
#| label: fit-models

def fit_models(df):
    X = df[['x1', 'x2']].values
    y = df['y'].values

    models = {
        "0.Linear": LinearRegression(),
        "1.Ridge": Ridge(alpha=1.0),
        "2.Lasso": Lasso(alpha=0.1)
    }

    results = []
    for name, model in models.items():
        model.fit(X, y)
        y_pred = model.predict(X)
        mse = mean_squared_error(y, y_pred)
        coefs = model.coef_
        biasb1 = coefs[0]-3
        biasb2 = coefs[1]-(-2)
        results.append({
            "Model": name,
            "MSE": mse,
            "bias_b1": biasb1,
            "bias_b2": biasb2
        })

    return pd.DataFrame(results)
```

## Results for Each Scenario

```{python}
#| label: results-all

res_none = fit_models(df_none)
res_mild = fit_models(df_mild)
res_strong = fit_models(df_strong)

results = pd.concat([
    res_none.assign(Scenario="0.None"),
    res_mild.assign(Scenario="1.Mild"),
    res_strong.assign(Scenario="2.Strong")
])

results.pivot(index="Scenario", columns="Model", values=["bias_b1", "bias_b2", "MSE"])
```

## What we should observe (according to theory)

-   In the **no correlation** case, all methods yield similar coefficients and MSE.
-   As multicollinearity increases, **Linear Regression** coefficients become unstable.
-   **Ridge** regression shrinks coefficients and handles multicollinearity better.
-   **Lasso** may set some coefficients to zero depending on the penalty strength.

## How do we know which numbers are statistically different? 

* We need repetitions!


------------------------------------------------------------------------
